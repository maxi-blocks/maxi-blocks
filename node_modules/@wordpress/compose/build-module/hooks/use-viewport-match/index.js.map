{"version":3,"sources":["@wordpress/compose/src/hooks/use-viewport-match/index.js"],"names":["createContext","useContext","useMediaQuery","BREAKPOINTS","huge","wide","large","medium","small","mobile","CONDITIONS","OPERATOR_EVALUATORS","breakpointValue","width","ViewportMatchWidthContext","useViewportMatch","breakpoint","operator","simulatedWidth","mediaQuery","mediaQueryResult","__experimentalWidthProvider","Provider"],"mappings":"AAAA;;;AAGA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,oBAA1C;AAEA;;;;AAGA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA;;;;AAIA;;;;;;;;AAOA,IAAMC,WAAW,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,KAAK,EAAE,GAHY;AAInBC,EAAAA,MAAM,EAAE,GAJW;AAKnBC,EAAAA,KAAK,EAAE,GALY;AAMnBC,EAAAA,MAAM,EAAE;AANW,CAApB;AASA;;;;AAIA;;;;;;AAKA,IAAMC,UAAU,GAAG;AAClB,QAAM,WADY;AAElB,OAAK;AAFa,CAAnB;AAKA;;;;;;AAKA,IAAMC,mBAAmB,GAAG;AAC3B,QAAM,WAAEC,eAAF,EAAmBC,KAAnB;AAAA,WAA8BA,KAAK,IAAID,eAAvC;AAAA,GADqB;AAE3B,OAAK,WAAEA,eAAF,EAAmBC,KAAnB;AAAA,WAA8BA,KAAK,GAAGD,eAAtC;AAAA;AAFsB,CAA5B;AAKA,IAAME,yBAAyB,GAAGd,aAAa,CAAE,IAAF,CAA/C;AAEA;;;;;;;;;;;;;;;;AAeA,IAAMe,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAEC,UAAF,EAAmC;AAAA,MAArBC,QAAqB,uEAAV,IAAU;AAC3D,MAAMC,cAAc,GAAGjB,UAAU,CAAEa,yBAAF,CAAjC;AACA,MAAMK,UAAU,GACf,CAAED,cAAF,eACKR,UAAU,CAAEO,QAAF,CADf,eACkCd,WAAW,CAAEa,UAAF,CAD7C,QADD;AAGA,MAAMI,gBAAgB,GAAGlB,aAAa,CAAEiB,UAAF,CAAtC;;AACA,MAAKD,cAAL,EAAsB;AACrB,WAAOP,mBAAmB,CAAEM,QAAF,CAAnB,CACNd,WAAW,CAAEa,UAAF,CADL,EAENE,cAFM,CAAP;AAIA;;AACD,SAAOE,gBAAP;AACA,CAbD;;AAeAL,gBAAgB,CAACM,2BAAjB,GACCP,yBAAyB,CAACQ,QAD3B;AAGA,eAAeP,gBAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createContext, useContext } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport useMediaQuery from '../use-media-query';\n\n/**\n * @typedef {\"huge\"|\"wide\"|\"large\"|\"medium\"|\"small\"|\"mobile\"} WPBreakpoint\n */\n\n/**\n * Hash of breakpoint names with pixel width at which it becomes effective.\n *\n * @see _breakpoints.scss\n *\n * @type {Object<WPBreakpoint,number>}\n */\nconst BREAKPOINTS = {\n\thuge: 1440,\n\twide: 1280,\n\tlarge: 960,\n\tmedium: 782,\n\tsmall: 600,\n\tmobile: 480,\n};\n\n/**\n * @typedef {\">=\"|\"<\"} WPViewportOperator\n */\n\n/**\n * Object mapping media query operators to the condition to be used.\n *\n * @type {Object<WPViewportOperator,string>}\n */\nconst CONDITIONS = {\n\t'>=': 'min-width',\n\t'<': 'max-width',\n};\n\n/**\n * Object mapping media query operators to a function that given a breakpointValue and a width evaluates if the operator matches the values.\n *\n * @type {Object<WPViewportOperator,Function>}\n */\nconst OPERATOR_EVALUATORS = {\n\t'>=': ( breakpointValue, width ) => width >= breakpointValue,\n\t'<': ( breakpointValue, width ) => width < breakpointValue,\n};\n\nconst ViewportMatchWidthContext = createContext( null );\n\n/**\n * Returns true if the viewport matches the given query, or false otherwise.\n *\n * @param {WPBreakpoint}       breakpoint      Breakpoint size name.\n * @param {WPViewportOperator} [operator=\">=\"] Viewport operator.\n *\n * @example\n *\n * ```js\n * useViewportMatch( 'huge', '<' );\n * useViewportMatch( 'medium' );\n * ```\n *\n * @return {boolean} Whether viewport matches query.\n */\nconst useViewportMatch = ( breakpoint, operator = '>=' ) => {\n\tconst simulatedWidth = useContext( ViewportMatchWidthContext );\n\tconst mediaQuery =\n\t\t! simulatedWidth &&\n\t\t`(${ CONDITIONS[ operator ] }: ${ BREAKPOINTS[ breakpoint ] }px)`;\n\tconst mediaQueryResult = useMediaQuery( mediaQuery );\n\tif ( simulatedWidth ) {\n\t\treturn OPERATOR_EVALUATORS[ operator ](\n\t\t\tBREAKPOINTS[ breakpoint ],\n\t\t\tsimulatedWidth\n\t\t);\n\t}\n\treturn mediaQueryResult;\n};\n\nuseViewportMatch.__experimentalWidthProvider =\n\tViewportMatchWidthContext.Provider;\n\nexport default useViewportMatch;\n"]}