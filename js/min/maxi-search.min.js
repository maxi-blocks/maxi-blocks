/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/maxi-search.js":
/*!***************************!*\
  !*** ./js/maxi-search.js ***!
  \***************************/
/***/ (function() {

eval("const onSearchEvent = input => {\n\tconst searchLink = maxiSearch[1];\n\tconst inputValue = input.value;\n\n\tif (input.checkValidity()) {\n\t\tconst searchUrl = `${searchLink}${inputValue}`;\n\n\t\twindow.location.href = searchUrl;\n\t} else {\n\t\tinput.setCustomValidity('Please fill in the search field.');\n\t\tinput.reportValidity();\n\t}\n};\n\nconst toggleClasses = (input, wrapper, isIcon) => {\n\tinput.classList.toggle('maxi-search-block__input--hidden');\n\n\tif (isIcon) {\n\t\twrapper.classList.toggle('maxi-search-block__button__close-icon');\n\t\twrapper.classList.toggle('maxi-search-block__button__default-icon');\n\t}\n};\n\nconst onRevealEvent = (\n\tevent,\n\tinput,\n\t{ wrapper, content, contentClose, isIcon },\n\tsearchBlock\n) => {\n\tconst { target, type } = event;\n\n\tconst isClickType = type !== 'mouseover' && type !== 'mouseleave';\n\n\tconst isTargetInside = searchBlock.contains(target);\n\tconst isTargetOnButton = searchBlock\n\t\t.querySelector('.maxi-search-block__button')\n\t\t.contains(target);\n\tconst isInputHidden = input.classList.contains(\n\t\t'maxi-search-block__input--hidden'\n\t);\n\tconst isInputFocussed = input === document.activeElement;\n\n\tif (\n\t\t(isClickType || (!isClickType && type === 'mouseover')) &&\n\t\tisInputHidden &&\n\t\tisTargetOnButton\n\t) {\n\t\twrapper.innerHTML = contentClose;\n\t\ttoggleClasses(input, wrapper, isIcon);\n\t} else if (\n\t\t!isInputHidden &&\n\t\t((isClickType && (isTargetOnButton || !isTargetInside)) ||\n\t\t\t(!isClickType && type === 'mouseleave' && !isInputFocussed))\n\t) {\n\t\twrapper.innerHTML = content;\n\t\ttoggleClasses(input, wrapper, isIcon);\n\t}\n};\n\nconst search = () => {\n\tObject.entries(maxiSearch[0]).forEach(\n\t\t([\n\t\t\tuniqueID,\n\t\t\t{\n\t\t\t\tbuttonIconContent,\n\t\t\t\tbuttonCloseIconContent,\n\t\t\t\tbuttonContent,\n\t\t\t\tbuttonContentClose,\n\t\t\t\tbuttonSkin,\n\t\t\t\ticonRevealAction,\n\t\t\t\tskin,\n\t\t\t},\n\t\t]) => {\n\t\t\tconst searchBlock = document.getElementById(uniqueID);\n\n\t\t\tif (!searchBlock) return;\n\n\t\t\tconst button = searchBlock.querySelector(\n\t\t\t\t'.maxi-search-block__button'\n\t\t\t);\n\t\t\tconst buttonIcon = searchBlock.querySelector(\n\t\t\t\t'.maxi-search-block__button__icon'\n\t\t\t);\n\t\t\tconst buttonText = searchBlock.querySelector(\n\t\t\t\t'.maxi-search-block__button__content'\n\t\t\t);\n\t\t\tconst input = searchBlock.querySelector(\n\t\t\t\t'.maxi-search-block__input'\n\t\t\t);\n\n\t\t\tconst isIcon = buttonSkin === 'icon';\n\n\t\t\tconst content = isIcon ? buttonIconContent : buttonContent;\n\t\t\tconst contentClose = isIcon\n\t\t\t\t? buttonCloseIconContent\n\t\t\t\t: buttonContentClose;\n\t\t\tconst wrapper = isIcon ? buttonIcon : buttonText;\n\n\t\t\tif (skin === 'icon-reveal') {\n\t\t\t\tconst events = [\n\t\t\t\t\t'click',\n\t\t\t\t\t...(iconRevealAction === 'hover'\n\t\t\t\t\t\t? ['mouseover', 'mouseleave']\n\t\t\t\t\t\t: []),\n\t\t\t\t];\n\n\t\t\t\tevents.forEach(event => {\n\t\t\t\t\tconst eventTarget =\n\t\t\t\t\t\tevent === 'click' ? document : searchBlock;\n\n\t\t\t\t\teventTarget.addEventListener(event, event =>\n\t\t\t\t\t\tonRevealEvent(\n\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t{ wrapper, content, contentClose, isIcon },\n\t\t\t\t\t\t\tsearchBlock\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tbutton.addEventListener('click', () => onSearchEvent(input));\n\t\t\t}\n\n\t\t\tinput.addEventListener('keypress', event => {\n\t\t\t\tif (event.key === 'Enter') {\n\t\t\t\t\tonSearchEvent(input);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t);\n};\n\nwindow.addEventListener('DOMContentLoaded', search);\n\n\n//# sourceURL=webpack://maxi-blocks/./js/maxi-search.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/maxi-search.js"]();
/******/ 	
/******/ })()
;