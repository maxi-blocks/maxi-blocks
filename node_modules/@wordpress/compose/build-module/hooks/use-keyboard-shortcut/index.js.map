{"version":3,"sources":["@wordpress/compose/src/hooks/use-keyboard-shortcut/index.js"],"names":["Mousetrap","includes","castArray","useEffect","isAppleOS","_window","window","platform","navigator","indexOf","useKeyboardShortcut","shortcuts","callback","bindGlobal","eventName","isDisabled","target","mousetrap","current","document","forEach","shortcut","keys","split","modifiers","Set","filter","value","length","hasAlt","has","hasShift","size","Error","bindFn","reset"],"mappings":"AAAA;;;AAGA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAO,qDAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,QAApC;AAEA;;;;AAGA,SAASC,SAAT,QAA0B,oBAA1B;AAEA;;;;;;;;;;;AAWA;;;;;;;;AAOA,SAASC,SAAT,GAAuC;AAAA,MAAnBC,OAAmB,uEAATC,MAAS;;AAAA,MAC9BC,QAD8B,GACjBF,OAAO,CAACG,SADS,CAC9BD,QAD8B;AAGtC,SACCA,QAAQ,CAACE,OAAT,CAAkB,KAAlB,MAA8B,CAAC,CAA/B,IACAR,QAAQ,CAAE,CAAE,MAAF,EAAU,QAAV,CAAF,EAAwBM,QAAxB,CAFT;AAIA;AAED;;;;;;;;;AAOA,SAASG,mBAAT,CACCC,SADD,EAECC,QAFD,EASE;AAAA,iFADG,EACH;AAAA,6BALAC,UAKA;AAAA,MALAA,UAKA,gCALa,KAKb;AAAA,4BAJAC,SAIA;AAAA,MAJAA,SAIA,+BAJY,SAIZ;AAAA,6BAHAC,UAGA;AAAA,MAHAA,UAGA,gCAHa,KAGb;AAAA,MAFAC,MAEA,QAFAA,MAEA;;AACDb,EAAAA,SAAS,CAAE,YAAM;AAChB,QAAKY,UAAL,EAAkB;AACjB;AACA;;AACD,QAAME,SAAS,GAAG,IAAIjB,SAAJ,CAAegB,MAAM,GAAGA,MAAM,CAACE,OAAV,GAAoBC,QAAzC,CAAlB;AACAjB,IAAAA,SAAS,CAAES,SAAF,CAAT,CAAuBS,OAAvB,CAAgC,UAAEC,QAAF,EAAgB;AAC/C,UAAMC,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAgB,GAAhB,CAAb,CAD+C,CAE/C;AACA;AACA;;AACA,UAAMC,SAAS,GAAG,IAAIC,GAAJ,CACjBH,IAAI,CAACI,MAAL,CAAa,UAAEC,KAAF;AAAA,eAAaA,KAAK,CAACC,MAAN,GAAe,CAA5B;AAAA,OAAb,CADiB,CAAlB;AAGA,UAAMC,MAAM,GAAGL,SAAS,CAACM,GAAV,CAAe,KAAf,CAAf;AACA,UAAMC,QAAQ,GAAGP,SAAS,CAACM,GAAV,CAAe,OAAf,CAAjB,CAT+C,CAW/C;;AACA,UACC1B,SAAS,OACLoB,SAAS,CAACQ,IAAV,KAAmB,CAAnB,IAAwBH,MAA1B,IACCL,SAAS,CAACQ,IAAV,KAAmB,CAAnB,IAAwBH,MAAxB,IAAkCE,QAF5B,CADV,EAIE;AACD,cAAM,IAAIE,KAAJ,uBACWZ,QADX,qEAAN;AAGA;;AAED,UAAMa,MAAM,GAAGrB,UAAU,GAAG,YAAH,GAAkB,MAA3C;AACAI,MAAAA,SAAS,CAAEiB,MAAF,CAAT,CAAqBb,QAArB,EAA+BT,QAA/B,EAAyCE,SAAzC;AACA,KAxBD;AA0BA,WAAO,YAAM;AACZG,MAAAA,SAAS,CAACkB,KAAV;AACA,KAFD;AAGA,GAlCQ,EAkCN,CAAExB,SAAF,EAAaE,UAAb,EAAyBC,SAAzB,EAAoCF,QAApC,EAA8CI,MAA9C,EAAsDD,UAAtD,CAlCM,CAAT;AAmCA;;AAED,eAAeL,mBAAf","sourcesContent":["/**\n * External dependencies\n */\nimport Mousetrap from 'mousetrap';\nimport 'mousetrap/plugins/global-bind/mousetrap-global-bind';\nimport { includes, castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect } from '@wordpress/element';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPKeyboardShortcutConfig\n *\n * @property {boolean} [bindGlobal]  Handle keyboard events anywhere including inside textarea/input fields.\n * @property {string}  [eventName]   Event name used to trigger the handler, defaults to keydown.\n * @property {boolean} [isDisabled]  Disables the keyboard handler if the value is true.\n * @property {Object}  [target]      React reference to the DOM element used to catch the keyboard event.\n */\n\n/**\n * Return true if platform is MacOS.\n *\n * @param {Object} _window   window object by default; used for DI testing.\n *\n * @return {boolean} True if MacOS; false otherwise.\n */\nfunction isAppleOS( _window = window ) {\n\tconst { platform } = _window.navigator;\n\n\treturn (\n\t\tplatform.indexOf( 'Mac' ) !== -1 ||\n\t\tincludes( [ 'iPad', 'iPhone' ], platform )\n\t);\n}\n\n/**\n * Attach a keyboard shortcut handler.\n *\n * @param {string[]|string}         shortcuts  Keyboard Shortcuts.\n * @param {Function}                callback   Shortcut callback.\n * @param {WPKeyboardShortcutConfig} options    Shortcut options.\n */\nfunction useKeyboardShortcut(\n\tshortcuts,\n\tcallback,\n\t{\n\t\tbindGlobal = false,\n\t\teventName = 'keydown',\n\t\tisDisabled = false, // This is important for performance considerations.\n\t\ttarget,\n\t} = {}\n) {\n\tuseEffect( () => {\n\t\tif ( isDisabled ) {\n\t\t\treturn;\n\t\t}\n\t\tconst mousetrap = new Mousetrap( target ? target.current : document );\n\t\tcastArray( shortcuts ).forEach( ( shortcut ) => {\n\t\t\tconst keys = shortcut.split( '+' );\n\t\t\t// Determines whether a key is a modifier by the length of the string.\n\t\t\t// E.g. if I add a pass a shortcut Shift+Cmd+M, it'll determine that\n\t\t\t// the modifiers are Shift and Cmd because they're not a single character.\n\t\t\tconst modifiers = new Set(\n\t\t\t\tkeys.filter( ( value ) => value.length > 1 )\n\t\t\t);\n\t\t\tconst hasAlt = modifiers.has( 'alt' );\n\t\t\tconst hasShift = modifiers.has( 'shift' );\n\n\t\t\t// This should be better moved to the shortcut registration instead.\n\t\t\tif (\n\t\t\t\tisAppleOS() &&\n\t\t\t\t( ( modifiers.size === 1 && hasAlt ) ||\n\t\t\t\t\t( modifiers.size === 2 && hasAlt && hasShift ) )\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot bind ${ shortcut }. Alt and Shift+Alt modifiers are reserved for character input.`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst bindFn = bindGlobal ? 'bindGlobal' : 'bind';\n\t\t\tmousetrap[ bindFn ]( shortcut, callback, eventName );\n\t\t} );\n\n\t\treturn () => {\n\t\t\tmousetrap.reset();\n\t\t};\n\t}, [ shortcuts, bindGlobal, eventName, callback, target, isDisabled ] );\n}\n\nexport default useKeyboardShortcut;\n"]}