/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/maxi-number-counter.js":
/*!***********************************!*\
  !*** ./js/maxi-number-counter.js ***!
  \***********************************/
/***/ (function() {

eval("const checkMediaQuery = numberID => {\n\tif (!maxiNumberCounter[0][numberID]) return;\n\tconst breakpoints = maxiNumberCounter[0][numberID].breakpoints;\n\tconst brkArray = ['xs', 's', 'm', 'l', 'xl', 'xxl'];\n\tlet breakpoint = 'xl';\n\tconst winWIdth = window.innerWidth;\n\tfor (const brpt of brkArray) {\n\t\tif (winWIdth <= breakpoints[brpt]) {\n\t\t\tbreakpoint = brpt;\n\t\t\tbreak;\n\t\t}\n\t}\n\tbreakpoint = breakpoint === 'xl' ? 'general' : breakpoint;\n\n\treturn breakpoint;\n};\n// Number Counter Effects\nconst numberCounterEffect = () => {\n\tconst numberElements = document.querySelectorAll('.maxi-nc-effect');\n\tnumberElements.forEach(elem => {\n\t\t// eslint-disable-next-line no-undef\n\t\tif (!maxiNumberCounter) return;\n\t\tconst numberID = elem.id;\n\n\t\tconst numberData =\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tmaxiNumberCounter[0][numberID] !== undefined\n\t\t\t\t? // eslint-disable-next-line no-undef\n\t\t\t\t  maxiNumberCounter[0][numberID]\n\t\t\t\t: null;\n\n\t\tif (numberData !== null) {\n\t\t\t// Number Counter\n\t\t\tif ('number-counter-status' in numberData) {\n\t\t\t\tconst numberCounterElem = document.querySelector(\n\t\t\t\t\t`#${numberID} .maxi-number-counter__box`\n\t\t\t\t);\n\t\t\t\tconst numberCounterElemText = document.querySelector(\n\t\t\t\t\t`#${numberID} .maxi-number-counter__box .maxi-number-counter__box__text`\n\t\t\t\t);\n\t\t\t\tconst numberCounterElemCircle = document.querySelector(\n\t\t\t\t\t`#${numberID} .maxi-number-counter__box .maxi-number-counter__box__circle`\n\t\t\t\t);\n\n\t\t\t\tconst radius = 90;\n\t\t\t\tconst circumference = 2 * Math.PI * radius;\n\t\t\t\tconst {\n\t\t\t\t\t'number-counter-start': numberCounterStart,\n\t\t\t\t\t'number-counter-end': numberCounterEnd,\n\t\t\t\t\t'number-counter-duration': numberCounterDuration,\n\t\t\t\t\t'number-counter-percentage-sign-status': usePercentage,\n\t\t\t\t\t'number-counter-start-animation': startAnimation,\n\t\t\t\t\t'number-counter-start-animation-offset':\n\t\t\t\t\t\tstartAnimationOffset,\n\t\t\t\t} = numberData;\n\t\t\t\tconst startCountValue = +numberCounterStart;\n\t\t\t\tconst endCountValue = +numberCounterEnd;\n\n\t\t\t\tconst frameDuration =\n\t\t\t\t\t(1 /\n\t\t\t\t\t\t((endCountValue - startCountValue) /\n\t\t\t\t\t\t\tnumberCounterDuration)) *\n\t\t\t\t\t1000;\n\n\t\t\t\tlet count = startCountValue;\n\t\t\t\tlet startTime;\n\t\t\t\tlet hasAnimated = false;\n\n\t\t\t\tconst animate = () => {\n\t\t\t\t\tconst newCount =\n\t\t\t\t\t\tstartCountValue +\n\t\t\t\t\t\tparseInt((Date.now() - startTime) / frameDuration);\n\n\t\t\t\t\tif (newCount === count) {\n\t\t\t\t\t\trequestAnimationFrame(animate);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else\n\t\t\t\t\t\tcount =\n\t\t\t\t\t\t\tnewCount > endCountValue ? endCountValue : newCount;\n\n\t\t\t\t\tlet newInnerHTML = `${count}`;\n\n\t\t\t\t\tif (usePercentage) {\n\t\t\t\t\t\tconst percentageNode =\n\t\t\t\t\t\t\tnumberCounterElemText.nodeName === 'SPAN'\n\t\t\t\t\t\t\t\t? '<sup>%</sup>'\n\t\t\t\t\t\t\t\t: '<tspan baseline-shift=\"super\">%</tspan>';\n\n\t\t\t\t\t\tnewInnerHTML += percentageNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tnumberCounterElemText.innerHTML = newInnerHTML;\n\n\t\t\t\t\tnumberCounterElemCircle &&\n\t\t\t\t\t\tnumberCounterElemCircle.setAttribute(\n\t\t\t\t\t\t\t'stroke-dasharray',\n\t\t\t\t\t\t\t`${Math.ceil(\n\t\t\t\t\t\t\t\t(count / 100) * circumference\n\t\t\t\t\t\t\t)} ${circumference}`\n\t\t\t\t\t\t);\n\t\t\t\t\tif (count < endCountValue) requestAnimationFrame(animate);\n\t\t\t\t};\n\n\t\t\t\tconst startCounter = () => {\n\t\t\t\t\tstartTime = Date.now();\n\t\t\t\t\trequestAnimationFrame(animate);\n\t\t\t\t};\n\n\t\t\t\tconst breakpoint = checkMediaQuery(numberID);\n\t\t\t\tsetNewDyAttribute(\n\t\t\t\t\tnumberCounterElemText,\n\t\t\t\t\tnumberData,\n\t\t\t\t\tbreakpoint\n\t\t\t\t);\n\n\t\t\t\tif (startAnimation === 'view-scroll') {\n\t\t\t\t\t// eslint-disable-next-line no-unused-vars, no-undef\n\t\t\t\t\tconst waypoint = new Waypoint({\n\t\t\t\t\t\telement: numberCounterElem,\n\t\t\t\t\t\thandler() {\n\t\t\t\t\t\t\tif (!hasAnimated) {\n\t\t\t\t\t\t\t\thasAnimated = true;\n\t\t\t\t\t\t\t\tstartCounter();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\toffset: `${startAnimationOffset || 100}%`,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tstartCounter();\n\t\t\t\t}\n\t\t\t\twindow.addEventListener('resize', () => {\n\t\t\t\t\tconst breakpoint = checkMediaQuery(numberID);\n\t\t\t\t\tsetNewDyAttribute(\n\t\t\t\t\t\tnumberCounterElemText,\n\t\t\t\t\t\tnumberData,\n\t\t\t\t\t\tbreakpoint\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n};\n\n// eslint-disable-next-line @wordpress/no-global-event-listener\nconst setNewDyAttribute = (elem, numberData, breakpoint) => {\n\tconst fontSize = getTitleFontSize(numberData, breakpoint);\n\telem.setAttribute(\n\t\t'dy',\n\t\t`${Math.round((fontSize / 4 + Number.EPSILON) * 100) / 100}px`\n\t);\n};\n\nconst getTitleFontSize = (numberData, breakpoint) => {\n\tconst breakpoints = ['xs', 's', 'm', 'l', 'general', 'xxl'];\n\tif (numberData[`number-counter-title-font-size-${breakpoint}`]) {\n\t\treturn numberData[`number-counter-title-font-size-${breakpoint}`];\n\t} else {\n\t\tconst winIndex = breakpoints.indexOf(breakpoint);\n\t\treturn getTitleFontSize(numberData, breakpoints[winIndex + 1]);\n\t}\n};\n\nwindow.addEventListener('load', numberCounterEffect);\n\n\n//# sourceURL=webpack://maxi-blocks/./js/maxi-number-counter.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/maxi-number-counter.js"]();
/******/ 	
/******/ })()
;