/**
 * WordPress dependencies
 */
import { createNewPost, insertBlock } from '@wordpress/e2e-test-utils';
import { getBlockAttributes } from '../../utils';

describe('default styles control', () => {
	beforeEach(async () => {
		await createNewPost();
	});
	it('checking the default styles control', async () => {
		await insertBlock('Text Maxi');
		await page.keyboard.type('check default styles');

		const expectAttributes = {
			'background-gradient-opacity': 1,
			'background-image-attachment': 'scroll',
			'background-image-clip': 'border-box',
			'background-image-height': 100,
			'background-image-height-unit': '%',
			'background-image-opacity': 1,
			'background-image-origin': 'padding-box',
			'background-image-position': 'center center',
			'background-image-position-height': 0,
			'background-image-position-height-unit': '%',
			'background-image-position-width': 0,
			'background-image-position-width-unit': '%',
			'background-image-repeat': 'no-repeat',
			'background-image-size': 'auto',
			'background-image-width': 100,
			'background-image-width-unit': '%',
			'background-layers-status': false,
			'background-layers-status-hover': false,
			'background-status-hover': false,
			'background-svg-left': 0,
			'background-svg-left--unit': '%',
			'background-svg-size': 100,
			'background-svg-size--unit': '%',
			'background-svg-top': 0,
			'background-svg-top--unit': '%',
			'background-video-loop': false,
			'background-video-opacity': 100,
			'background-video-playOnMobile': false,
			blockStyle: 'maxi-light',
			blockStyleBackground: 1,
			'border-status-hover': false,
			'border-sync-radius-general': true,
			'border-sync-width-general': true,
			'border-unit-radius-general': 'px',
			'border-unit-radius-general-hover': 'px',
			'border-unit-width-general': 'px',
			'box-shadow-color-general': 'var(--maxi-shadow-color)',
			'box-shadow-color-general-hover': '',
			'box-shadow-status-hover': false,
			'container-height-unit-general': 'px',
			'container-max-height-unit-general': 'px',
			'container-max-width-general': 1170,
			'container-max-width-l': 90,
			'container-max-width-m': 90,
			'container-max-width-s': 90,
			'container-max-width-unit-general': 'px',
			'container-max-width-unit-l': '%',
			'container-max-width-unit-m': '%',
			'container-max-width-unit-s': '%',
			'container-max-width-unit-xl': 'px',
			'container-max-width-unit-xs': '%',
			'container-max-width-unit-xxl': 'px',
			'container-max-width-xl': 1170,
			'container-max-width-xs': 90,
			'container-max-width-xxl': 1790,
			'container-min-height-unit-general': 'px',
			'container-min-width-unit-general': 'px',
			'container-size-advanced-options': false,
			'container-width-l': 1170,
			'container-width-m': 1000,
			'container-width-s': 700,
			'container-width-unit-l': 'px',
			'container-width-unit-m': 'px',
			'container-width-unit-s': 'px',
			'container-width-unit-xs': 'px',
			'container-width-xs': 460,
			content: 'check default styles',
			customLabel: 'Text',
			defaultBlockStyle: 'maxi-def-light',
			'entrance-delay': 1,
			'entrance-duration': 1,
			'entrance-type': 'none',
			extraClassName: '',
			'font-size-unit-general': 'px',
			fullWidth: 'normal',
			'height-unit-general': 'px',
			isFirstOnHierarchy: true,
			isList: false,
			'letter-spacing-unit-general': 'px',
			listReversed: 0,
			'margin-sync-general': false,
			'margin-unit-general': 'px',
			'max-height-unit-general': 'px',
			'max-width-unit-general': 'px',
			'min-height-unit-general': 'px',
			'min-width-unit-general': 'px',
			'motion-active-time-line-index': 0,
			'motion-active-time-line-time': 0,
			'motion-mobile-status': true,
			'motion-preset-status': false,
			'motion-preview-status': false,
			'motion-status': false,
			'motion-tablet-status': true,
			'motion-transform-origin-x': 'center',
			'motion-transform-origin-y': 'center',
			'padding-sync-general': false,
			'padding-unit-general': 'px',
			'palette-custom-background-color': false,
			'palette-custom-background-hover-color': false,
			'palette-custom-border-color': false,
			'palette-custom-border-hover-color': false,
			'palette-custom-box-shadow-color': false,
			'palette-custom-box-shadow-hover-color': false,
			'palette-custom-circle-background-color': false,
			'palette-custom-circle-bar-background-color': false,
			'palette-custom-divider-color': false,
			'palette-custom-divider-hover-color': false,
			'palette-custom-hover-background-color': false,
			'palette-custom-icon-color': false,
			'palette-custom-icon-hover-color': false,
			'palette-custom-marker-address-color': false,
			'palette-custom-marker-title-color': false,
			'palette-custom-svg-background-color': false,
			'palette-custom-svgColorFill-color': false,
			'palette-custom-svgColorLine-color': false,
			'palette-custom-typography-color': false,
			'palette-custom-typography-hover-color': false,
			'palette-preset-background-hover-color': 6,
			'palette-preset-border-color': 2,
			'palette-preset-border-hover-color': 6,
			'palette-preset-box-shadow-color': 1,
			'palette-preset-box-shadow-hover-color': 6,
			'palette-preset-circle-background-color': 2,
			'palette-preset-circle-bar-background-color': 4,
			'palette-preset-divider-color': 4,
			'palette-preset-divider-hover-color': 6,
			'palette-preset-hover-background-color': 6,
			'palette-preset-icon-color': 7,
			'palette-preset-icon-hover-color': 6,
			'palette-preset-marker-address-color': 5,
			'palette-preset-marker-title-color': 4,
			'palette-preset-svg-background-color': 5,
			'palette-preset-svgColorFill-color': 4,
			'palette-preset-svgColorLine-color': 7,
			'parallax-direction': 'up',
			'parallax-speed': 4,
			'parallax-status': false,
			parentBlockStyle: 'light',
			'position-sync-general': false,
			'position-unit-general': 'px',
			'size-advanced-options': false,
			textLevel: 'p',
			'transform-translate-x-unit-general': '%',
			'transform-translate-y-unit-general': '%',
			typeOfList: 'ul',
			'typography-status-hover': false,
			uniqueID: 'text-maxi-12',
			'width-unit-general': 'px',
		};
		const attributes = await getBlockAttributes();

		expect(attributes).toStrictEqual(expectAttributes);
	});
});
