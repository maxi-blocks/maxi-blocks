import getGroupAttributes from '../getGroupAttributes';

const attributes = {
	_ecn: '',
	_al: '',
	_cl: 'Button',
	_fw: 'normal',
	_bc: '',
	'_a-g': 'center',
	'_ps-g': true,
	'_pc-g': 4,
	'_fs.u-g': 'px',
	'_lhe.u-g': '%',
	'_lhe-g': '100',
	'_ls.u-g': 'px',
	't.sh': false,
	'_ps-g.h': true,
	'_pc-g.h': 5,
	'b_am-g': '',
	'bc_ps-g': true,
	'bc_pc-g': 4,
	'bg_o-g': 1,
	'bc_ps-g.h': true,
	'bc_pc-g.h': 6,
	'bo_ps-g': true,
	'bo_pc-g': 5,
	'bo_w.sy-g': true,
	'bo_w.u-g': 'px',
	'bo.ra.tl-g': 10,
	'bo.ra.tr-g': 10,
	'bo.ra.br-g': 10,
	'bo.ra.bl-g': 10,
	'bo.ra.sy-g': true,
	'bo.ra.u-g': 'px',
	i_i: true,
	i_c: '<svg class="twitter-line-maxi-svg" width="64px" height="64px" viewBox="0 0 24 24"><path d="M21.856 5.888c-.733.322-1.514.535-2.328.638a4.02 4.02 0 0 0 1.778-2.234c-.781.466-1.643.795-2.563.978a4.05 4.05 0 0 0-2.952-1.279 4.04 4.04 0 0 0-4.038 4.042c0 .32.027.628.094.922-3.36-.164-6.332-1.774-8.329-4.227-.349.605-.553 1.297-.553 2.043 0 1.399.721 2.64 1.795 3.358a3.99 3.99 0 0 1-1.826-.498v.044a4.06 4.06 0 0 0 3.238 3.971c-.329.09-.687.133-1.059.133-.259 0-.52-.015-.765-.069a4.08 4.08 0 0 0 3.776 2.815 8.12 8.12 0 0 1-5.01 1.724 7.58 7.58 0 0 1-.967-.055c1.79 1.154 3.912 1.814 6.199 1.814 7.436 0 11.502-6.16 11.502-11.499a10.34 10.34 0 0 0-.015-.522c.802-.569 1.476-1.28 2.026-2.098z" fill="none" data-stroke="" stroke="var(--maxi-light-color,rgba(var(--maxi-light-color-4), 1))" stroke-width="2" stroke-linejoin="round" stroke-miterlimit="10"></path></svg>',
	i_o: true,
	i_pos: 'left',
	'i_w-g': 23,
	'i_w.u-g': 'px',
	'i_spa-g': 0,
	'i-str-g': 1.5,
	i_ps: true,
	i_pc: 4,
	'i_p.sy-g': true,
	'i_p.sy-horizontal-g': false,
	'i_p.sy-vertical-g': false,
	'i_p.u-g': 'px',
	'i-bo-_ps-g': true,
	'i-bo-_pc-g': 4,
	'i-bo.ra.u-g': '%',
	'i.sh': true,
	'i_i.h': true,
	'i_c.h': '',
	'i_o.h': false,
	'i_pos.h': 'right',
	'i_w-g.h': '',
	'i_w.u-g.h': 'px',
	'i_spa-g.h': 5,
	'i-str-g.h': '',
	'i_ps.h': true,
	'i_pc.h': 6,
	'i-bc_ps.h': true,
	'i-bc_pc.h': 4,
	'i-bg_o.h': 1,
	'i-bo_ps-g.h': true,
	'i-bo_pc-g.h': 6,
	'i-bo.ra.u-g.h': 'px',
	'bo.sh': true,
	'bo_ps-g.h': true,
	'bo_pc-g.h': 3,
	'bo.ra.u-g.h': 'px',
	_sao: false,
	'_mw.u-g': 'px',
	'_w.u-g': 'px',
	'_miw.u-g': 'px',
	'_mh.u-g': 'px',
	'_h.u-g': 'px',
	'_mih.u-g': 'px',
	'bs_ps-g': false,
	'bs_pc-g': 8,
	'bs.sh': false,
	'bs_ps-g.h': true,
	'bs_pc-g.h': 6,
	'_m.sy-g': false,
	'_m.sy-horizontal-g': false,
	'_m.sy-vertical-g': false,
	'_m.u-g': 'px',
	'_p.t-g': 0,
	'_p.r-g': 0,
	'_p.b-g': 0,
	'_p.l-g': 0,
	'_p.sy-g': true,
	'_p.u-g': 'px',
	'_p.t-xxl': 23,
	'_p.r-xxl': 55,
	'_p.b-xxl': 23,
	'_p.l-xxl': 55,
	'_pos.sy-g': false,
	'_pos.u-g': 'px',
	'tr_tr-x.u-g': '%',
	'tr_tr-y.u-g': '%',
	'tr_ori-x.u-g': '%',
	'tr_ori-y.u-g': '%',
	_uid: 'button-maxi-1',
	_ioh: true,
	_bs: 'maxi-light',
	'bo_s-g': 'solid',
	'i-bc_pc-g': 1,
	'i-bc_ps-g': true,
	'i-bo.ra.bl-g': 100,
	'i-bo.ra.b.r-g': 100,
	'i-bo_w.b-g': 2,
	'i-bo_w.l-g': 2,
	'i-bo_w.r-g': 2,
	'i-bo_s-g': 'solid',
	'i-bo.ra.sy-g': true,
	'i-bo_w.sy-g': true,
	'i-bo.ra.tl-g': 100,
	'i-bo.ra.tr-g': 100,
	'i-bo_w.t-g': 2,
	'i-bo_w.u-g': 'px',
	'i_p.b-g': 5,
	'i_p.l-g': 5,
	'i_p.r-g': 5,
	'i_p.t-g': 5,
	'i_w-xxl': 35,
	'i-bo.ra.bl-xxl': 100,
	'i-bo.ra.b.r-xxl': 100,
	'i-bo.ra.tl-xxl': 100,
	'i-bo.ra.tr-xxl': 100,
	'i-bo.ra.u-xxl': '%',
	'i_p.b-xxl': 7,
	'i_p.l-xxl': 7,
	'i_p.r-xxl': 7,
	'i_p.t-xxl': 7,
	'i_p.sy-xxl': true,
	'i-str-xxl': 1.3,
	'b_am-g.h': 'none',
	'_ps.h': false,
	'i-bo_s-g.h': 'solid',
	'i-bc_ps-g.h': false,
	'bo_w.t-g': 2,
	'bo_w.r-g': 2,
	'bo_w.b-g': 2,
	'bo_w.l-g': 2,
	'bo_s-g.h': 'dashed',
	'bo_w.t-g.h': 20,
	'bo_w.r-g.h': 20,
	'bo_w.b-g.h': 20,
	'bo_w.l-g.h': 20,
	'bo_w.sy-g.h': true,
	'bo_w.u-g.h': 'px',
	'bo.ra.tl-g.h': 100,
	'bo.ra.tr-g.h': 100,
	'bo.ra.b.r-g.h': 100,
	'bo.ra.bl-g.h': 100,
	'bo.ra.sy-g.h': true,
	'bo_po-g.h': 40,
};

describe('getGroupAttributes', () => {
	it('Return basic attributes from string', () => {
		expect(getGroupAttributes(attributes, 'border')).toMatchSnapshot();
	});

	it('Return basic attributes from array', () => {
		expect(
			getGroupAttributes(attributes, [
				'border',
				'borderWidth',
				'borderRadius',
			])
		).toMatchSnapshot();
	});

	it('Return basic attributes from string with hover', () => {
		expect(
			getGroupAttributes(attributes, 'border', true)
		).toMatchSnapshot();
	});

	it('Return basic attributes from array with hover', () => {
		expect(
			getGroupAttributes(
				attributes,
				['border', 'borderWidth', 'borderRadius'],
				true
			)
		).toMatchSnapshot();
	});

	it('Return basic attributes from string with prefix', () => {
		expect(
			getGroupAttributes(attributes, 'border', false, 'i-')
		).toMatchSnapshot();
	});
});
