{"version":3,"file":"react-svg.umd.development.js","sources":["../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/inheritsLoose.js","../node_modules/@tanem/svg-injector/src/clone-svg.ts","../node_modules/@tanem/svg-injector/src/is-local.ts","../node_modules/@tanem/svg-injector/src/svg-cache.ts","../node_modules/@tanem/svg-injector/src/request-queue.ts","../node_modules/@tanem/svg-injector/src/load-svg.ts","../node_modules/@tanem/svg-injector/src/unique-id.ts","../node_modules/@tanem/svg-injector/src/inject-element.ts","../node_modules/@tanem/svg-injector/src/svg-injector.ts","../compiled/shallow-differs.js","../compiled/ReactSVG.js"],"sourcesContent":["function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","const cloneSvg = (sourceSvg: HTMLElement | SVGSVGElement) =>\n  sourceSvg.cloneNode(true) as Element\n\nexport default cloneSvg\n","const isLocal = () => window.location.protocol === 'file:'\n\nexport default isLocal\n","const svgCache = new Map<\n  string,\n  HTMLElement | SVGSVGElement | Error | undefined\n>()\n\nexport default svgCache\n","import cloneSvg from './clone-svg'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nlet requestQueue: { [key: string]: Errback[] } = {}\n\nexport const clear = () => {\n  requestQueue = {}\n}\n\nexport const queueRequest = (url: string, callback: Errback) => {\n  requestQueue[url] = requestQueue[url] || []\n  requestQueue[url].push(callback)\n}\n\nexport const processRequestQueue = (url: string) => {\n  for (let i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer.\n    setTimeout(() => {\n      /* istanbul ignore else */\n      if (Array.isArray(requestQueue[url])) {\n        const cacheValue = svgCache.get(url)\n        const callback = requestQueue[url][i]\n\n        /* istanbul ignore else */\n        if (\n          cacheValue instanceof SVGSVGElement ||\n          cacheValue instanceof HTMLElement\n        ) {\n          callback(null, cloneSvg(cacheValue))\n        }\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof Error) {\n          callback(cacheValue)\n        }\n\n        /* istanbul ignore else */\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url]\n        }\n      }\n    }, 0)\n  }\n}\n","import cloneSvg from './clone-svg'\nimport isLocal from './is-local'\nimport { processRequestQueue, queueRequest } from './request-queue'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nconst loadSvg = (url: string, callback: Errback) => {\n  if (svgCache.has(url)) {\n    const cacheValue = svgCache.get(url)\n\n    if (\n      cacheValue instanceof SVGSVGElement ||\n      cacheValue instanceof HTMLElement\n    ) {\n      callback(null, cloneSvg(cacheValue))\n      return\n    }\n\n    if (cacheValue instanceof Error) {\n      callback(cacheValue)\n      return\n    }\n\n    queueRequest(url, callback)\n\n    return\n  }\n\n  // Seed the cache to indicate we are loading this URL.\n  svgCache.set(url, undefined)\n  queueRequest(url, callback)\n\n  const httpRequest = new XMLHttpRequest()\n\n  httpRequest.onreadystatechange = () => {\n    try {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(\n            isLocal()\n              ? 'Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.'\n              : 'Unable to load SVG file: ' + url\n          )\n        }\n\n        if (\n          httpRequest.status === 200 ||\n          (isLocal() && httpRequest.status === 0)\n        ) {\n          /* istanbul ignore else */\n          if (httpRequest.responseXML instanceof Document) {\n            /* istanbul ignore else */\n            if (httpRequest.responseXML.documentElement) {\n              svgCache.set(url, httpRequest.responseXML.documentElement)\n            }\n          }\n          processRequestQueue(url)\n        } else {\n          throw new Error(\n            'There was a problem injecting the SVG: ' +\n              httpRequest.status +\n              ' ' +\n              httpRequest.statusText\n          )\n        }\n      }\n    } catch (error) {\n      svgCache.set(url, error)\n      processRequestQueue(url)\n    }\n  }\n\n  httpRequest.open('GET', url)\n\n  // Treat and parse the response as XML, even if the server sends us a\n  // different mimetype.\n  /* istanbul ignore else */\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml')\n  }\n\n  httpRequest.send()\n}\n\nexport default loadSvg\n","let idCounter = 0\nconst uniqueId = () => ++idCounter\nexport default uniqueId\n","import loadSvg from './load-svg'\nimport { BeforeEach, Errback, EvalScripts } from './types'\nimport uniqueId from './unique-id'\n\ntype ElementType = Element | HTMLElement | null\n\nconst injectedElements: ElementType[] = []\nconst ranScripts: { [key: string]: boolean } = {}\nconst svgNamespace = 'http://www.w3.org/2000/svg'\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink'\n\nconst injectElement = (\n  el: NonNullable<ElementType>,\n  evalScripts: EvalScripts,\n  renumerateIRIElements: boolean,\n  beforeEach: BeforeEach,\n  callback: Errback\n) => {\n  const imgUrl = el.getAttribute('data-src') || el.getAttribute('src')\n\n  /* istanbul ignore else */\n  if (!imgUrl || !/\\.svg/i.test(imgUrl)) {\n    callback(\n      new Error(\n        'Attempted to inject a file with a non-svg extension: ' + imgUrl\n      )\n    )\n    return\n  }\n\n  // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail, so\n  // no need for IE8 indexOf() polyfill.\n  /* istanbul ignore else */\n  if (injectedElements.indexOf(el) !== -1) {\n    // TODO: Extract.\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n    return\n  }\n\n  // Remember the request to inject this element, in case other injection calls\n  // are also trying to replace this element before we finish.\n  injectedElements.push(el)\n\n  // Try to avoid loading the orginal image src if possible.\n  el.setAttribute('src', '')\n\n  loadSvg(imgUrl, (error, svg) => {\n    /* istanbul ignore else */\n    if (!svg) {\n      // TODO: Extract.\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(error)\n      return\n    }\n\n    const imgId = el.getAttribute('id')\n    /* istanbul ignore else */\n    if (imgId) {\n      svg.setAttribute('id', imgId)\n    }\n\n    const imgTitle = el.getAttribute('title')\n    /* istanbul ignore else */\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle)\n    }\n\n    const imgWidth = el.getAttribute('width')\n    /* istanbul ignore else */\n    if (imgWidth) {\n      svg.setAttribute('width', imgWidth)\n    }\n\n    const imgHeight = el.getAttribute('height')\n    /* istanbul ignore else */\n    if (imgHeight) {\n      svg.setAttribute('height', imgHeight)\n    }\n\n    const mergedClasses = Array.from(\n      new Set([\n        ...(svg.getAttribute('class') || '').split(' '),\n        'injected-svg',\n        ...(el.getAttribute('class') || '').split(' ')\n      ])\n    )\n      .join(' ')\n      .trim()\n    svg.setAttribute('class', mergedClasses)\n\n    const imgStyle = el.getAttribute('style')\n    /* istanbul ignore else */\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle)\n    }\n\n    svg.setAttribute('data-src', imgUrl)\n\n    // Copy all the data elements to the svg.\n    const imgData = [].filter.call(el.attributes, (at: Attr) => {\n      return /^data-\\w[\\w-]*$/.test(at.name)\n    })\n\n    Array.prototype.forEach.call(imgData, (dataAttr: Attr) => {\n      /* istanbul ignore else */\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their clip-path\n      // references are unique.\n      //\n      // This addresses the issue of having multiple instances of the same SVG\n      // on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths contained\n      // in parent elements that are hidden, so if you hide the first SVG\n      // instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by\n      // w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI. Mapping IRI\n      // addressable elements to the properties that can reference them.\n      const iriElementsAndProperties: { [key: string]: string[] } = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      }\n\n      let element\n      let elements\n      let properties\n      let currentId: string\n      let newId: string\n\n      Object.keys(iriElementsAndProperties).forEach(key => {\n        element = key\n        properties = iriElementsAndProperties[key]\n\n        elements = svg.querySelectorAll(element + '[id]')\n        for (let a = 0, elementsLen = elements.length; a < elementsLen; a++) {\n          currentId = elements[a].id\n          newId = currentId + '-' + uniqueId()\n\n          // All of the properties that can reference this element type.\n          let referencingElements\n          Array.prototype.forEach.call(properties, (property: string) => {\n            // :NOTE: using a substring match attr selector here to deal with IE\n            // \"adding extra quotes in url() attrs\".\n            referencingElements = svg.querySelectorAll(\n              '[' + property + '*=\"' + currentId + '\"]'\n            )\n            for (\n              let b = 0, referencingElementLen = referencingElements.length;\n              b < referencingElementLen;\n              b++\n            ) {\n              const attrValue: string | null = referencingElements[\n                b\n              ].getAttribute(property)\n              if (\n                attrValue &&\n                !attrValue.match(new RegExp('url\\\\(#' + currentId + '\\\\)'))\n              ) {\n                continue\n              }\n              referencingElements[b].setAttribute(\n                property,\n                'url(#' + newId + ')'\n              )\n            }\n          })\n\n          const allLinks = svg.querySelectorAll('[*|href]')\n          const links = []\n          for (let c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            const href = allLinks[c].getAttributeNS(xlinkNamespace, 'href')\n            /* istanbul ignore else */\n            if (href && href.toString() === '#' + elements[a].id) {\n              links.push(allLinks[c])\n            }\n          }\n          for (let d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId)\n          }\n\n          elements[a].id = newId\n        }\n      })\n    }\n\n    // Remove any unwanted/invalid namespaces that might have been added by SVG\n    // editing tools.\n    svg.removeAttribute('xmlns:a')\n\n    // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested.\n\n    // Find then prune the scripts.\n    const scripts = svg.querySelectorAll('script')\n    const scriptsToEval: string[] = []\n    let script\n    let scriptType\n\n    for (let i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type')\n\n      // Only process javascript types. SVG defaults to 'application/ecmascript'\n      // for unset types.\n      /* istanbul ignore else */\n      if (\n        !scriptType ||\n        scriptType === 'application/ecmascript' ||\n        scriptType === 'application/javascript' ||\n        scriptType === 'text/javascript'\n      ) {\n        // innerText for IE, textContent for other browsers.\n        script = scripts[i].innerText || scripts[i].textContent\n\n        // Stash.\n        /* istanbul ignore else */\n        if (script) {\n          scriptsToEval.push(script)\n        }\n\n        // Tidy up and remove the script element since we don't need it anymore.\n        svg.removeChild(scripts[i])\n      }\n    }\n\n    // Run/Eval the scripts if needed.\n    /* istanbul ignore else */\n    if (\n      scriptsToEval.length > 0 &&\n      (evalScripts === 'always' ||\n        (evalScripts === 'once' && !ranScripts[imgUrl]))\n    ) {\n      for (\n        let l = 0, scriptsToEvalLen = scriptsToEval.length;\n        l < scriptsToEvalLen;\n        l++\n      ) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a\n        // caller defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'.\n        new Function(scriptsToEval[l])(window)\n      }\n\n      // Remember we already ran scripts for this svg.\n      ranScripts[imgUrl] = true\n    }\n\n    // :WORKAROUND: IE doesn't evaluate <style> tags in SVGs that are\n    // dynamically added to the page. This trick will trigger IE to read and use\n    // any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23.\n    const styleTags = svg.querySelectorAll('style')\n    Array.prototype.forEach.call(styleTags, (styleTag: HTMLStyleElement) => {\n      styleTag.textContent += ''\n    })\n\n    svg.setAttribute('xmlns', svgNamespace)\n    svg.setAttribute('xmlns:xlink', xlinkNamespace)\n\n    beforeEach(svg)\n\n    // Replace the image with the svg.\n    /* istanbul ignore else */\n    if (el.parentNode) {\n      el.parentNode.replaceChild(svg, el)\n    }\n\n    // Now that we no longer need it, drop references to the original element so\n    // it can be GC'd.\n    // TODO: Extract\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n\n    callback(null, svg)\n  })\n}\n\nexport default injectElement\n","import injectElement from './inject-element'\nimport { AfterAll, BeforeEach, Errback, EvalScripts } from './types'\n\ntype Elements = HTMLCollectionOf<Element> | NodeListOf<Element> | Element | null\n\ninterface OptionalArgs {\n  afterAll?: AfterAll\n  afterEach?: Errback\n  beforeEach?: BeforeEach\n  evalScripts?: EvalScripts\n  renumerateIRIElements?: boolean\n}\n\nconst SVGInjector = (\n  elements: Elements,\n  {\n    afterAll = () => undefined,\n    afterEach = () => undefined,\n    beforeEach = () => undefined,\n    evalScripts = 'never',\n    renumerateIRIElements = true\n  }: OptionalArgs = {}\n) => {\n  if (elements && 'length' in elements) {\n    let elementsLoaded = 0\n    for (let i = 0, j = elements.length; i < j; i++) {\n      injectElement(\n        elements[i],\n        evalScripts,\n        renumerateIRIElements,\n        beforeEach,\n        (error, svg) => {\n          afterEach(error, svg)\n          if (\n            elements &&\n            'length' in elements &&\n            elements.length === ++elementsLoaded\n          ) {\n            afterAll(elementsLoaded)\n          }\n        }\n      )\n    }\n  } else if (elements) {\n    injectElement(\n      elements,\n      evalScripts,\n      renumerateIRIElements,\n      beforeEach,\n      (error, svg) => {\n        afterEach(error, svg)\n        afterAll(1)\n        elements = null\n      }\n    )\n  } else {\n    afterAll(0)\n  }\n}\n\nexport default SVGInjector\n","// Hat-tip: https://github.com/developit/preact-compat/blob/master/src/index.js#L402.\nconst shallowDiffers = (a, b) => {\n    for (const i in a) {\n        if (!(i in b)) {\n            return true;\n        }\n    }\n    for (const i in b) {\n        if (a[i] !== b[i]) {\n            return true;\n        }\n    }\n    return false;\n};\nexport default shallowDiffers;\n","import { SVGInjector } from '@tanem/svg-injector';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport shallowDiffers from './shallow-differs';\nexport class ReactSVG extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.initialState = {\n            hasError: false,\n            isLoading: true\n        };\n        this.state = this.initialState;\n        this._isMounted = false;\n        this.refCallback = (container) => {\n            this.container = container;\n        };\n    }\n    renderSVG() {\n        /* istanbul ignore else */\n        if (this.container instanceof Node) {\n            const { beforeInjection, evalScripts, renumerateIRIElements, src } = this.props;\n            /* eslint-disable @typescript-eslint/no-non-null-assertion */\n            const afterInjection = this.props.afterInjection;\n            const Wrapper = this.props.wrapper;\n            /* eslint-enable @typescript-eslint/no-non-null-assertion */\n            const wrapper = document.createElement(Wrapper);\n            wrapper.innerHTML = ReactDOMServer.renderToStaticMarkup(React.createElement(Wrapper, null,\n                React.createElement(Wrapper, { \"data-src\": src })));\n            this.svgWrapper = this.container.appendChild(wrapper.firstChild);\n            const afterEach = (error, svg) => {\n                if (error) {\n                    this.removeSVG();\n                }\n                // TODO: It'd be better to cleanly unsubscribe from SVGInjector\n                // callbacks instead of tracking a property like this.\n                if (this._isMounted) {\n                    this.setState(() => ({\n                        hasError: !!error,\n                        isLoading: false\n                    }), () => {\n                        afterInjection(error, svg);\n                    });\n                }\n            };\n            SVGInjector(this.svgWrapper.firstChild, {\n                afterEach,\n                beforeEach: beforeInjection,\n                evalScripts,\n                renumerateIRIElements\n            });\n        }\n    }\n    removeSVG() {\n        if (this.container instanceof Node && this.svgWrapper instanceof Node) {\n            this.container.removeChild(this.svgWrapper);\n            this.svgWrapper = null;\n        }\n    }\n    componentDidMount() {\n        this._isMounted = true;\n        this.renderSVG();\n    }\n    componentDidUpdate(prevProps) {\n        if (shallowDiffers(prevProps, this.props)) {\n            this.setState(() => this.initialState, () => {\n                this.removeSVG();\n                this.renderSVG();\n            });\n        }\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n        this.removeSVG();\n    }\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const { afterInjection, beforeInjection, evalScripts, fallback: Fallback, loading: Loading, renumerateIRIElements, src, wrapper, ...rest } = this.props;\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const Wrapper = wrapper;\n        return (React.createElement(Wrapper, Object.assign({}, rest, { ref: this.refCallback }),\n            this.state.isLoading && Loading && React.createElement(Loading, null),\n            this.state.hasError && Fallback && React.createElement(Fallback, null)));\n    }\n}\nReactSVG.defaultProps = {\n    afterInjection: () => undefined,\n    beforeInjection: () => undefined,\n    evalScripts: 'never',\n    fallback: null,\n    loading: null,\n    renumerateIRIElements: true,\n    wrapper: 'div'\n};\nReactSVG.propTypes = {\n    afterInjection: PropTypes.func,\n    beforeInjection: PropTypes.func,\n    evalScripts: PropTypes.oneOf(['always', 'once', 'never']),\n    fallback: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.object,\n        PropTypes.string\n    ]),\n    loading: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.object,\n        PropTypes.string\n    ]),\n    renumerateIRIElements: PropTypes.bool,\n    src: PropTypes.string.isRequired,\n    wrapper: PropTypes.oneOf(['div', 'span'])\n};\n"],"names":["shallowDiffers","a","b","i","ReactSVG","arguments","initialState","hasError","isLoading","state","_isMounted","refCallback","container","renderSVG","Node","props","beforeInjection","evalScripts","renumerateIRIElements","src","afterInjection","Wrapper","wrapper","document","createElement","innerHTML","ReactDOMServer","renderToStaticMarkup","React","svgWrapper","appendChild","firstChild","afterEach","error","svg","removeSVG","setState","SVGInjector","beforeEach","removeChild","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","render","Fallback","fallback","Loading","loading","rest","Object","assign","ref","defaultProps","undefined","propTypes","PropTypes","isRequired"],"mappings":"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"}