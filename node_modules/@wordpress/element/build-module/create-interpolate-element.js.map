{"version":3,"sources":["@wordpress/element/src/create-interpolate-element.js"],"names":["createElement","cloneElement","Fragment","isValidElement","indoc","offset","output","stack","tokenizer","createFrame","element","tokenStart","tokenLength","prevOffset","leadingTextStart","children","createInterpolateElement","interpolatedString","conversionMap","lastIndex","isValidConversionMap","TypeError","proceed","isObject","values","Object","length","every","next","nextToken","tokenType","name","startOffset","stackDepth","addText","pop","stackLeadingText","push","substr","addChild","closeOuterElement","stackTop","text","frame","matches","exec","startedAt","index","match","isClosing","isSelfClosed","parent","endOffset"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { createElement, cloneElement, Fragment, isValidElement } from 'react';\n\n/** @typedef {import('./react').WPElement} WPElement */\n\nlet indoc, offset, output, stack;\n\n/**\n * Matches tags in the localized string\n *\n * This is used for extracting the tag pattern groups for parsing the localized\n * string and along with the map converting it to a react element.\n *\n * There are four references extracted using this tokenizer:\n *\n * match: Full match of the tag (i.e. <strong>, </strong>, <br/>)\n * isClosing: The closing slash, it it exists.\n * name: The name portion of the tag (strong, br) (if )\n * isSelfClosed: The slash on a self closing tag, if it exists.\n *\n * @type {RegExp}\n */\nconst tokenizer = /<(\\/)?(\\w+)\\s*(\\/)?>/g;\n\n/**\n * The stack frame tracking parse progress.\n *\n * @typedef Frame\n *\n * @property {WPElement} element            A parent element which may still have\n * @property {number}    tokenStart         Offset at which parent element first\n *                                          appears.\n * @property {number}    tokenLength        Length of string marking start of parent\n *                                          element.\n * @property {number}    [prevOffset]       Running offset at which parsing should\n *                                          continue.\n * @property {number}    [leadingTextStart] Offset at which last closing element\n *                                          finished, used for finding text between\n *                                          elements.\n * @property {WPElement[]} children         Children.\n */\n\n/**\n * Tracks recursive-descent parse state.\n *\n * This is a Stack frame holding parent elements until all children have been\n * parsed.\n *\n * @private\n * @param {WPElement} element            A parent element which may still have\n *                                       nested children not yet parsed.\n * @param {number}    tokenStart         Offset at which parent element first\n *                                       appears.\n * @param {number}    tokenLength        Length of string marking start of parent\n *                                       element.\n * @param {number}    [prevOffset]       Running offset at which parsing should\n *                                       continue.\n * @param {number}    [leadingTextStart] Offset at which last closing element\n *                                       finished, used for finding text between\n *                                       elements.\n *\n * @return {Frame} The stack frame tracking parse progress.\n */\nfunction createFrame(\n\telement,\n\ttokenStart,\n\ttokenLength,\n\tprevOffset,\n\tleadingTextStart\n) {\n\treturn {\n\t\telement,\n\t\ttokenStart,\n\t\ttokenLength,\n\t\tprevOffset,\n\t\tleadingTextStart,\n\t\tchildren: [],\n\t};\n}\n\n/**\n * This function creates an interpolated element from a passed in string with\n * specific tags matching how the string should be converted to an element via\n * the conversion map value.\n *\n * @example\n * For example, for the given string:\n *\n * \"This is a <span>string</span> with <a>a link</a> and a self-closing\n * <CustomComponentB/> tag\"\n *\n * You would have something like this as the conversionMap value:\n *\n * ```js\n * {\n *     span: <span />,\n *     a: <a href={ 'https://github.com' } />,\n *     CustomComponentB: <CustomComponent />,\n * }\n * ```\n *\n * @param {string}  interpolatedString  The interpolation string to be parsed.\n * @param {Object}  conversionMap       The map used to convert the string to\n *                                      a react element.\n * @throws {TypeError}\n * @return {WPElement}  A wp element.\n */\nconst createInterpolateElement = ( interpolatedString, conversionMap ) => {\n\tindoc = interpolatedString;\n\toffset = 0;\n\toutput = [];\n\tstack = [];\n\ttokenizer.lastIndex = 0;\n\n\tif ( ! isValidConversionMap( conversionMap ) ) {\n\t\tthrow new TypeError(\n\t\t\t'The conversionMap provided is not valid. It must be an object with values that are WPElements'\n\t\t);\n\t}\n\n\tdo {\n\t\t// twiddle our thumbs\n\t} while ( proceed( conversionMap ) );\n\treturn createElement( Fragment, null, ...output );\n};\n\n/**\n * Validate conversion map.\n *\n * A map is considered valid if it's an object and every value in the object\n * is a WPElement\n *\n * @private\n *\n * @param {Object} conversionMap  The map being validated.\n *\n * @return {boolean}  True means the map is valid.\n */\nconst isValidConversionMap = ( conversionMap ) => {\n\tconst isObject = typeof conversionMap === 'object';\n\tconst values = isObject && Object.values( conversionMap );\n\treturn (\n\t\tisObject &&\n\t\tvalues.length &&\n\t\tvalues.every( ( element ) => isValidElement( element ) )\n\t);\n};\n\n/**\n * This is the iterator over the matches in the string.\n *\n * @private\n *\n * @param {Object} conversionMap The conversion map for the string.\n *\n * @return {boolean} true for continuing to iterate, false for finished.\n */\nfunction proceed( conversionMap ) {\n\tconst next = nextToken();\n\tconst [ tokenType, name, startOffset, tokenLength ] = next;\n\tconst stackDepth = stack.length;\n\tconst leadingTextStart = startOffset > offset ? offset : null;\n\tif ( ! conversionMap[ name ] ) {\n\t\taddText();\n\t\treturn false;\n\t}\n\tswitch ( tokenType ) {\n\t\tcase 'no-more-tokens':\n\t\t\tif ( stackDepth !== 0 ) {\n\t\t\t\tconst {\n\t\t\t\t\tleadingTextStart: stackLeadingText,\n\t\t\t\t\ttokenStart,\n\t\t\t\t} = stack.pop();\n\t\t\t\toutput.push( indoc.substr( stackLeadingText, tokenStart ) );\n\t\t\t}\n\t\t\taddText();\n\t\t\treturn false;\n\n\t\tcase 'self-closed':\n\t\t\tif ( 0 === stackDepth ) {\n\t\t\t\tif ( null !== leadingTextStart ) {\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tindoc.substr(\n\t\t\t\t\t\t\tleadingTextStart,\n\t\t\t\t\t\t\tstartOffset - leadingTextStart\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\toutput.push( conversionMap[ name ] );\n\t\t\t\toffset = startOffset + tokenLength;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// otherwise we found an inner element\n\t\t\taddChild(\n\t\t\t\tcreateFrame( conversionMap[ name ], startOffset, tokenLength )\n\t\t\t);\n\t\t\toffset = startOffset + tokenLength;\n\t\t\treturn true;\n\n\t\tcase 'opener':\n\t\t\tstack.push(\n\t\t\t\tcreateFrame(\n\t\t\t\t\tconversionMap[ name ],\n\t\t\t\t\tstartOffset,\n\t\t\t\t\ttokenLength,\n\t\t\t\t\tstartOffset + tokenLength,\n\t\t\t\t\tleadingTextStart\n\t\t\t\t)\n\t\t\t);\n\t\t\toffset = startOffset + tokenLength;\n\t\t\treturn true;\n\n\t\tcase 'closer':\n\t\t\t// if we're not nesting then this is easy - close the block\n\t\t\tif ( 1 === stackDepth ) {\n\t\t\t\tcloseOuterElement( startOffset );\n\t\t\t\toffset = startOffset + tokenLength;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// otherwise we're nested and we have to close out the current\n\t\t\t// block and add it as a innerBlock to the parent\n\t\t\tconst stackTop = stack.pop();\n\t\t\tconst text = indoc.substr(\n\t\t\t\tstackTop.prevOffset,\n\t\t\t\tstartOffset - stackTop.prevOffset\n\t\t\t);\n\t\t\tstackTop.children.push( text );\n\t\t\tstackTop.prevOffset = startOffset + tokenLength;\n\t\t\tconst frame = createFrame(\n\t\t\t\tstackTop.element,\n\t\t\t\tstackTop.tokenStart,\n\t\t\t\tstackTop.tokenLength,\n\t\t\t\tstartOffset + tokenLength\n\t\t\t);\n\t\t\tframe.children = stackTop.children;\n\t\t\taddChild( frame );\n\t\t\toffset = startOffset + tokenLength;\n\t\t\treturn true;\n\n\t\tdefault:\n\t\t\taddText();\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Grabs the next token match in the string and returns it's details.\n *\n * @private\n *\n * @return {Array}  An array of details for the token matched.\n */\nfunction nextToken() {\n\tconst matches = tokenizer.exec( indoc );\n\t// we have no more tokens\n\tif ( null === matches ) {\n\t\treturn [ 'no-more-tokens' ];\n\t}\n\tconst startedAt = matches.index;\n\tconst [ match, isClosing, name, isSelfClosed ] = matches;\n\tconst length = match.length;\n\tif ( isSelfClosed ) {\n\t\treturn [ 'self-closed', name, startedAt, length ];\n\t}\n\tif ( isClosing ) {\n\t\treturn [ 'closer', name, startedAt, length ];\n\t}\n\treturn [ 'opener', name, startedAt, length ];\n}\n\n/**\n * Pushes text extracted from the indoc string to the output stack given the\n * current rawLength value and offset (if rawLength is provided ) or the\n * indoc.length and offset.\n *\n * @private\n */\nfunction addText() {\n\tconst length = indoc.length - offset;\n\tif ( 0 === length ) {\n\t\treturn;\n\t}\n\toutput.push( indoc.substr( offset, length ) );\n}\n\n/**\n * Pushes a child element to the associated parent element's children for the\n * parent currently active in the stack.\n *\n * @private\n *\n * @param {Frame}    frame       The Frame containing the child element and it's\n *                               token information.\n */\nfunction addChild( frame ) {\n\tconst { element, tokenStart, tokenLength, prevOffset, children } = frame;\n\tconst parent = stack[ stack.length - 1 ];\n\tconst text = indoc.substr(\n\t\tparent.prevOffset,\n\t\ttokenStart - parent.prevOffset\n\t);\n\n\tif ( text ) {\n\t\tparent.children.push( text );\n\t}\n\n\tparent.children.push( cloneElement( element, null, ...children ) );\n\tparent.prevOffset = prevOffset ? prevOffset : tokenStart + tokenLength;\n}\n\n/**\n * This is called for closing tags. It creates the element currently active in\n * the stack.\n *\n * @private\n *\n * @param {number} endOffset Offset at which the closing tag for the element\n *                           begins in the string. If this is greater than the\n *                           prevOffset attached to the element, then this\n *                           helps capture any remaining nested text nodes in\n *                           the element.\n */\nfunction closeOuterElement( endOffset ) {\n\tconst {\n\t\telement,\n\t\tleadingTextStart,\n\t\tprevOffset,\n\t\ttokenStart,\n\t\tchildren,\n\t} = stack.pop();\n\n\tconst text = endOffset\n\t\t? indoc.substr( prevOffset, endOffset - prevOffset )\n\t\t: indoc.substr( prevOffset );\n\n\tif ( text ) {\n\t\tchildren.push( text );\n\t}\n\n\tif ( null !== leadingTextStart ) {\n\t\toutput.push(\n\t\t\tindoc.substr( leadingTextStart, tokenStart - leadingTextStart )\n\t\t);\n\t}\n\n\toutput.push( cloneElement( element, null, ...children ) );\n}\n\nexport default createInterpolateElement;\n"]}