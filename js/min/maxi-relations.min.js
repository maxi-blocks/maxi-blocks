/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/maxi-relations.js":
/*!******************************!*\
  !*** ./js/maxi-relations.js ***!
  \******************************/
/***/ (function() {

eval("// Relations\n\nconst breakpoints = ['general', 'xxl', 'xl', 'l', 'm', 's', 'xs'];\n\nconst relations = () => {\n\tconst getCssResponsiveObj = (css, effects) => {\n\t\tconst getCssObjForEachTarget = (css, effects) => {\n\t\t\tlet stylesObj = {};\n\t\t\tlet effectsObj = {};\n\n\t\t\tObject.entries(css).forEach(([breakpoint, obj]) => {\n\t\t\t\tif (\n\t\t\t\t\tbreakpoints.includes(breakpoint) &&\n\t\t\t\t\t(window.innerWidth <= obj.breakpoint || !obj.breakpoint)\n\t\t\t\t) {\n\t\t\t\t\tstylesObj = {\n\t\t\t\t\t\t...stylesObj,\n\t\t\t\t\t\t...obj.styles,\n\t\t\t\t\t};\n\n\t\t\t\t\tconst getLastEffectsBreakpointAttribute = target =>\n\t\t\t\t\t\teffects[`${target}-${breakpoint}`] !== undefined\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t[target]:\n\t\t\t\t\t\t\t\t\t\teffects[`${target}-${breakpoint}`],\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {};\n\n\t\t\t\t\teffectsObj = {\n\t\t\t\t\t\t...effectsObj,\n\t\t\t\t\t\t...getLastEffectsBreakpointAttribute(\n\t\t\t\t\t\t\t'transition-status'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t...getLastEffectsBreakpointAttribute(\n\t\t\t\t\t\t\t'transition-duration'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t...getLastEffectsBreakpointAttribute(\n\t\t\t\t\t\t\t'transition-delay'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t...getLastEffectsBreakpointAttribute('easing'),\n\t\t\t\t\t};\n\t\t\t\t} else if (!obj.breakpoint) {\n\t\t\t\t\tconst { stylesObj: rawStyles, effectsObj: rawEffects } =\n\t\t\t\t\t\tgetCssObjForEachTarget(obj, effects);\n\n\t\t\t\t\tstylesObj = {\n\t\t\t\t\t\t...stylesObj,\n\t\t\t\t\t\t[breakpoint]: rawStyles,\n\t\t\t\t\t\tisTargets: true,\n\t\t\t\t\t};\n\n\t\t\t\t\teffectsObj = {\n\t\t\t\t\t\t...effectsObj,\n\t\t\t\t\t\t...rawEffects,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn { stylesObj, effectsObj };\n\t\t};\n\n\t\tconst { stylesObj, effectsObj } = getCssObjForEachTarget(css, effects);\n\n\t\treturn {\n\t\t\tstylesObj,\n\t\t\teffectsObj,\n\t\t};\n\t};\n\n\tconst escapeRegExp = string => {\n\t\treturn string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\t};\n\n\tconst toggleInlineStyles = (stylesObj, target, remove = false) => {\n\t\tif (stylesObj.isTargets) {\n\t\t\tObject.entries(stylesObj).forEach(([targetSelector, styles]) => {\n\t\t\t\ttargetSelector !== 'isTargets' &&\n\t\t\t\t\ttoggleInlineStyles(\n\t\t\t\t\t\tstyles,\n\t\t\t\t\t\t`${target} ${targetSelector}`,\n\t\t\t\t\t\tremove\n\t\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\tconst interactionStyle = document.querySelector(\n\t\t\t\t'#maxi-blocks-interaction-css'\n\t\t\t);\n\t\t\tconst selector = `body.maxi-blocks--active ${target} {`.replace(\n\t\t\t\t/\\s{2,}/g,\n\t\t\t\t' '\n\t\t\t);\n\n\t\t\tObject.entries(stylesObj).forEach(([key, value]) => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tconst styleRegExp = new RegExp(\n\t\t\t\t\t\t`(${escapeRegExp(selector)}.*?) ${key}:.*?;`\n\t\t\t\t\t);\n\n\t\t\t\t\tinteractionStyle.textContent =\n\t\t\t\t\t\tinteractionStyle.textContent.replace(styleRegExp, '$1');\n\t\t\t\t} else {\n\t\t\t\t\tconst selectorRegExp = new RegExp(\n\t\t\t\t\t\t`(${escapeRegExp(selector)})`\n\t\t\t\t\t);\n\t\t\t\t\tif (!interactionStyle.textContent.match(selectorRegExp))\n\t\t\t\t\t\tinteractionStyle.textContent += `${selector}}`;\n\n\t\t\t\t\tinteractionStyle.textContent =\n\t\t\t\t\t\tinteractionStyle.textContent.replace(\n\t\t\t\t\t\t\tselectorRegExp,\n\t\t\t\t\t\t\t`$1 ${key}: ${value};`\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst toggleTransition = (\n\t\ttarget,\n\t\tstylesObj,\n\t\teffectsObj,\n\t\tisIcon = false,\n\t\tremove = false\n\t) => {\n\t\tconst isSVGIcon = target.includes('svg-icon'); // svg-icon is a special case; avoid disco effect ðŸª©\n\n\t\tconst targets = stylesObj?.isTargets ? Object.keys(stylesObj) : null;\n\n\t\tif (targets) {\n\t\t\ttargets.forEach(targetSelector => {\n\t\t\t\ttargetSelector !== 'isTargets' &&\n\t\t\t\t\ttoggleTransition(\n\t\t\t\t\t\t`${target} ${targetSelector}`,\n\t\t\t\t\t\tstylesObj[targetSelector],\n\t\t\t\t\t\teffectsObj,\n\t\t\t\t\t\tisIcon,\n\t\t\t\t\t\tremove\n\t\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\tconst interactionStyle = document.querySelector(\n\t\t\t\t'#maxi-blocks-interaction-css'\n\t\t\t);\n\t\t\tconst selector = `body.maxi-blocks--active ${target}${\n\t\t\t\t'' // isSVGIcon ? ' *' : ''\n\t\t\t} {`.replace(/\\s{2,}/g, ' ');\n\t\t\tconst transitionString = getTransitionString(\n\t\t\t\tstylesObj,\n\t\t\t\teffectsObj,\n\t\t\t\tisIcon\n\t\t\t);\n\n\t\t\tif (remove) {\n\t\t\t\tconst styleRegExp = new RegExp(\n\t\t\t\t\t`(${escapeRegExp(selector)}.*?) transition:.*?;`\n\t\t\t\t);\n\t\t\t\tinteractionStyle.textContent =\n\t\t\t\t\tinteractionStyle.textContent.replace(styleRegExp, '$1');\n\t\t\t} else {\n\t\t\t\tconst selectorRegExp = new RegExp(\n\t\t\t\t\t`(${escapeRegExp(selector)})`\n\t\t\t\t);\n\t\t\t\tif (!interactionStyle.textContent.match(selectorRegExp))\n\t\t\t\t\tinteractionStyle.textContent += `${selector}}`;\n\n\t\t\t\tconst transitionExistsRegExp = new RegExp(\n\t\t\t\t\t`(${escapeRegExp(selector)}[^{]*transition:)`\n\t\t\t\t);\n\t\t\t\tif (!transitionString) return;\n\n\t\t\t\tif (\n\t\t\t\t\tinteractionStyle.textContent.match(transitionExistsRegExp)\n\t\t\t\t) {\n\t\t\t\t\t!isIcon &&\n\t\t\t\t\t\t(interactionStyle.textContent =\n\t\t\t\t\t\t\tinteractionStyle.textContent.replace(\n\t\t\t\t\t\t\t\ttransitionExistsRegExp,\n\t\t\t\t\t\t\t\t`$1 ${transitionString}`\n\t\t\t\t\t\t\t));\n\t\t\t\t} else {\n\t\t\t\t\tinteractionStyle.textContent =\n\t\t\t\t\t\tinteractionStyle.textContent.replace(\n\t\t\t\t\t\t\tselectorRegExp,\n\t\t\t\t\t\t\t`$1 transition: ${transitionString.replace(\n\t\t\t\t\t\t\t\t/, $/,\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t)};`\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst getTransitionString = (styleObj, effectsObj, isIcon) => {\n\t\tif (isIcon)\n\t\t\treturn effectsObj['transition-status']\n\t\t\t\t? `all ${effectsObj['transition-duration']}s ${effectsObj['transition-delay']}s ${effectsObj['easing']}`\n\t\t\t\t: `all 0s 0s, `;\n\t\telse\n\t\t\treturn Object.keys(styleObj).reduce(\n\t\t\t\t(transitionString, style) =>\n\t\t\t\t\teffectsObj['transition-status']\n\t\t\t\t\t\t? `${transitionString}${style} ${effectsObj['transition-duration']}s ${effectsObj['transition-delay']}s ${effectsObj['easing']}, `\n\t\t\t\t\t\t: `${transitionString}${style} 0s 0s, `,\n\t\t\t\t''\n\t\t\t);\n\t};\n\n\tmaxiRelations[0]?.forEach(item => {\n\t\tif (!item?.uniqueID) return;\n\n\t\tconst triggerEl = document.querySelector(`.${item.trigger}`);\n\t\tconst target = `#${item.uniqueID} ${item.target ?? ''}`;\n\t\tconst targetEl = document.querySelector(target);\n\n\t\tif (!triggerEl || !targetEl) return;\n\n\t\tlet timeout;\n\t\tlet contentTimeout;\n\t\tlet dataTimeout;\n\n\t\tswitch (item.action) {\n\t\t\tcase 'hover':\n\t\t\t\t{\n\t\t\t\t\ttriggerEl.addEventListener('mouseenter', () => {\n\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\tclearTimeout(dataTimeout);\n\n\t\t\t\t\t\ttargetEl.setAttribute('data-maxi-relations', 'true');\n\n\t\t\t\t\t\tconst { stylesObj, effectsObj } = getCssResponsiveObj(\n\t\t\t\t\t\t\titem.css,\n\t\t\t\t\t\t\titem.effects\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\ttoggleTransition(\n\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`,\n\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\teffectsObj,\n\t\t\t\t\t\t\titem.settings === 'Icon colour' ||\n\t\t\t\t\t\t\t\titem.settings === 'Button icon'\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\ttoggleInlineStyles(\n\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * In case the target element is nested inside the trigger element, we need to ensure the original hover transition\n\t\t\t\t\t\t * works correctly on hovering. It means, we need to remove the transitions added by the trigger when hovering the target\n\t\t\t\t\t\t * to ensure it has the selected effects\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (triggerEl.contains(targetEl)) {\n\t\t\t\t\t\t\tconst { transitionTarget } = item.effects;\n\t\t\t\t\t\t\tconst transitionTargets =\n\t\t\t\t\t\t\t\ttypeof transitionTarget === 'string'\n\t\t\t\t\t\t\t\t\t? [transitionTarget]\n\t\t\t\t\t\t\t\t\t: transitionTarget;\n\n\t\t\t\t\t\t\ttransitionTargets.forEach(transitionTarget => {\n\t\t\t\t\t\t\t\tconst transitionDuration =\n\t\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\t\tgetComputedStyle(\n\t\t\t\t\t\t\t\t\t\t\ttransitionTarget\n\t\t\t\t\t\t\t\t\t\t\t\t? targetEl.querySelector(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransitionTarget\n\t\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t\t: targetEl\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.getPropertyValue(\n\t\t\t\t\t\t\t\t\t\t\t\t'transition-duration'\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.replace('s', '')\n\t\t\t\t\t\t\t\t\t) * 1000;\n\n\t\t\t\t\t\t\t\ttargetEl.addEventListener('mouseenter', () => {\n\t\t\t\t\t\t\t\t\tclearTimeout(contentTimeout);\n\n\t\t\t\t\t\t\t\t\t// Remove transitions to let the original ones be applied\n\t\t\t\t\t\t\t\t\ttoggleTransition(\n\t\t\t\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`,\n\t\t\t\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\t\t\t\teffectsObj,\n\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\ttargetEl.addEventListener('mouseleave', () => {\n\t\t\t\t\t\t\t\t\tcontentTimeout = setTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t// Set the transitions back waiting the original to be done\n\t\t\t\t\t\t\t\t\t\ttoggleTransition(\n\t\t\t\t\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`,\n\t\t\t\t\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\t\t\t\t\teffectsObj,\n\t\t\t\t\t\t\t\t\t\t\titem.settings === 'Icon colour' ||\n\t\t\t\t\t\t\t\t\t\t\t\titem.settings === 'Button icon'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}, transitionDuration);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\ttriggerEl.addEventListener('mouseleave', () => {\n\t\t\t\t\t\tconst { stylesObj, effectsObj } = getCssResponsiveObj(\n\t\t\t\t\t\t\titem.css,\n\t\t\t\t\t\t\titem.effects\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (triggerEl.contains(targetEl))\n\t\t\t\t\t\t\ttoggleTransition(\n\t\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`,\n\t\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\t\teffectsObj,\n\t\t\t\t\t\t\t\titem.settings === 'Icon colour' ||\n\t\t\t\t\t\t\t\t\titem.settings === 'Button icon'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdataTimeout = setTimeout(() => {\n\t\t\t\t\t\t\ttargetEl.setAttribute(\n\t\t\t\t\t\t\t\t'data-maxi-relations',\n\t\t\t\t\t\t\t\t'false'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}, item.effects['transition-duration-general'] * 1000 + 1000);\n\n\t\t\t\t\t\ttoggleInlineStyles(\n\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\t// Removing transition after transition-duration + 1s to make sure it's done\n\t\t\t\t\t\t\ttoggleTransition(\n\t\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`,\n\t\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\t\teffectsObj,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}, item.effects['transition-duration-general'] * 1000 + 1000);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'click':\n\t\t\t\t{\n\t\t\t\t\ttriggerEl.addEventListener('click', () => {\n\t\t\t\t\t\ttargetEl.setAttribute('data-maxi-relations', 'true');\n\n\t\t\t\t\t\tconst { stylesObj, effectsObj } = getCssResponsiveObj(\n\t\t\t\t\t\t\titem.css,\n\t\t\t\t\t\t\titem.effects\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\ttoggleTransition(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\teffectsObj,\n\t\t\t\t\t\t\titem.settings === 'Icon colour' ||\n\t\t\t\t\t\t\t\titem.settings === 'Button icon'\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\ttoggleInlineStyles(\n\t\t\t\t\t\t\tstylesObj,\n\t\t\t\t\t\t\t`${target.trim()}[data-maxi-relations=\"true\"]`\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t});\n};\n\nwindow.addEventListener('load', relations);\nwindow.addEventListener('load', () => {\n\tif (maxiRelations[0].length) {\n\t\tif (!document.querySelector('#maxi-blocks-interaction-css')) {\n\t\t\tconst inlineStyle = document.querySelector(\n\t\t\t\t'#maxi-blocks-inline-css'\n\t\t\t);\n\t\t\tif (inlineStyle) {\n\t\t\t\tconst interactionStyle = document.createElement('style');\n\t\t\t\tinteractionStyle.id = 'maxi-blocks-interaction-css';\n\t\t\t\tinlineStyle.parentNode.insertBefore(\n\t\t\t\t\tinteractionStyle,\n\t\t\t\t\tinlineStyle.nextSibling\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n});\n\n\n//# sourceURL=webpack://maxi-blocks/./js/maxi-relations.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/maxi-relations.js"]();
/******/ 	
/******/ })()
;