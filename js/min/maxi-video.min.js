/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/maxi-video.js":
/*!**************************!*\
  !*** ./js/maxi-video.js ***!
  \**************************/
/***/ (function() {

eval("const videoEvents = () => {\n\tconst videoBLocks = document.querySelectorAll('.maxi-video-block');\n\tvideoBLocks.forEach(video => {\n\t\tif (video.classList.contains('maxi-video-block--youtube')) {\n\t\t\tif (!isScriptMounted('maxi-youtube-sdk')) insertYoutubeScript();\n\t\t\treturn;\n\t\t}\n\n\t\tconst videoID = video.id;\n\n\t\tconst videoData =\n\t\t\tmaxiVideo[0][videoID] !== undefined ? maxiVideo[0][videoID] : null;\n\n\t\tconst player = video.querySelector('.maxi-video-block__video-player');\n\t\tconst videoType = videoData['videoType'];\n\t\tconst embedUrl = videoData['embedUrl'];\n\n\t\tif (videoData['playerType'] === 'popup') {\n\t\t\tpopupEvents(player, video, videoType, embedUrl);\n\t\t}\n\n\t\tconst videoEnd = videoData['endTime'];\n\n\t\tif (videoType === 'vimeo' && videoEnd) {\n\t\t\tif (!isScriptMounted('maxi-vimeo-sdk')) {\n\t\t\t\tconst script = document.createElement('script');\n\t\t\t\tscript.src = 'https://player.vimeo.com/api/player.js';\n\t\t\t\tscript.id = 'maxi-vimeo-sdk';\n\t\t\t\tscript.async = true;\n\t\t\t\tscript.onload = () => {\n\t\t\t\t\t// Cleanup onload handler\n\t\t\t\t\tscript.onload = null;\n\n\t\t\t\t\thandleVimeoVideos();\n\t\t\t\t};\n\t\t\t\tdocument.body.appendChild(script);\n\t\t\t}\n\t\t}\n\t});\n};\n\nconst handleYoutubeVideos = () => {\n\tconst youtubeVideos = document.querySelectorAll(\n\t\t'.maxi-video-block--youtube'\n\t);\n\tyoutubeVideos.forEach(video => {\n\t\tconst videoID = video.id;\n\n\t\tconst videoData =\n\t\t\tmaxiVideo[0][videoID] !== undefined ? maxiVideo[0][videoID] : null;\n\n\t\tconst iframe = video.querySelector('iframe');\n\t\tiframe.id = `${videoID}-iframe`;\n\t\tiframe.src = videoData['embedUrl'];\n\n\t\tconst player = new YT.Player(iframe.id, {\n\t\t\tevents: {\n\t\t\t\tonStateChange: handleStateChange,\n\t\t\t},\n\t\t});\n\n\t\tfunction handleStateChange(state) {\n\t\t\tconst { isLoop, startTime } = videoData;\n\n\t\t\tif (state.data === YT.PlayerState.ENDED && isLoop) {\n\t\t\t\tplayer.seekTo(startTime || 0);\n\t\t\t}\n\t\t}\n\n\t\tif (videoData['playerType'] === 'popup') {\n\t\t\tpopupEvents(player, video, 'youtube');\n\t\t}\n\t});\n};\n\nfunction handleVimeoVideos() {\n\tconst vimeoVideos = document.querySelectorAll('.maxi-video-block--vimeo');\n\tvimeoVideos.forEach(video => {\n\t\tconst videoID = video.id;\n\n\t\tconst videoData =\n\t\t\tmaxiVideo[0][videoID] !== undefined ? maxiVideo[0][videoID] : null;\n\n\t\tconst player = video.querySelector('iframe');\n\n\t\tplayer.src = videoData['embedUrl'];\n\t\tconst vimeoPlayer = new Vimeo.Player(player);\n\t\tconst endTime = videoData['endTime'];\n\t\tconst startTime = videoData['startTime'];\n\t\tconst isLoop = videoData['isLoop'];\n\n\t\tvimeoPlayer.on('timeupdate', function (data) {\n\t\t\tif (data.seconds > +endTime) {\n\t\t\t\tif (isLoop) vimeoPlayer.setCurrentTime(startTime || '0');\n\t\t\t\telse vimeoPlayer.pause();\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction popupEvents(player, video, type, embedUrl) {\n\tconst wrapper = video.querySelector('.maxi-video-block__popup-wrapper');\n\tconst overlay = video.querySelector('.maxi-video-block__overlay');\n\n\tconst openVideo = () => {\n\t\twrapper.style.display = 'flex';\n\t\tif (type !== 'youtube') player.src = embedUrl;\n\t};\n\n\tconst closeVideo = e => {\n\t\tif (e.target.classList.contains('maxi-video-block__video-player'))\n\t\t\treturn;\n\t\twrapper.style.display = 'none';\n\t\tif (type === 'youtube') {\n\t\t\tplayer.pauseVideo();\n\t\t} else {\n\t\t\tplayer.src = '';\n\t\t}\n\t};\n\n\toverlay.addEventListener('click', openVideo);\n\twrapper.addEventListener('click', closeVideo);\n}\n\nfunction isScriptMounted(id) {\n\tconst scriptsArray = Array.from(window.document.scripts);\n\n\tconst mountedId = scriptsArray.findIndex(\n\t\tscript => script.getAttribute('id') === id\n\t);\n\n\treturn mountedId !== -1;\n}\n\nfunction insertYoutubeScript() {\n\tconst script = document.createElement('script');\n\tscript.src = 'https://www.youtube.com/iframe_api';\n\tscript.id = 'maxi-youtube-sdk';\n\tdocument.body.appendChild(script);\n}\n\nfunction onYouTubeIframeAPIReady() {\n\thandleYoutubeVideos();\n}\n\nwindow.addEventListener('load', videoEvents);\n\n\n//# sourceURL=webpack://maxi-blocks/./js/maxi-video.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/maxi-video.js"]();
/******/ 	
/******/ })()
;